/*******************************************************************************
***
***   Dear friend :
***   When I wrote this code, only I and God knew what it was.
***
***   But now only God knows what is here ! 
***   
***   So, if you done trying to 'optimize' this code,
***   please include this comment as a warning for the next guy who also will  
***   trying to do this.
***
***   Author : denys.ark@gmail.com
***
********************************************************************************/
html, body, div, span, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
abbr, address, cite, code,
del, dfn, em, img, ins, kbd, q, samp,
small, strong, sub, sup, var,
b, i,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, figcaption, figure,
footer, header, hgroup, menu, nav, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-size: 100%;
  font-weight: 100;
  vertical-align: baseline;
  background: transparent;
}

body {
  line-height: 1;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

ul {
  list-style: none;
}

a {
  margin: 0;
  padding: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

/* box model for all elements */
*, *:after, *:before {
  box-sizing: border-box;
}

@font-face {
  font-family: 'HelveticaNeue-UltraLight';
  src: url("../fonts/HelveticaNeue-UltraLight.eot");
  src: url("../fonts/HelveticaNeue-UltraLight.eot?#iefix") format("embedded-opentype"), url("../fonts/HelveticaNeue-UltraLight.woff") format("woff"), url("../fonts/HelveticaNeue-UltraLight.ttf") format("truetype"), url("../fonts/HelveticaNeue-UltraLight.svg?#HelveticaNeue-UltraLight") format("svg");
  font-style: normal;
  font-weight: normal;
  text-rendering: optimizeLegibility;
}

body {
  background-color: #162a60;
  overflow-x: hidden;
  font: 100 1em 'HelveticaNeue-UltraLight', sans-serif;
  color: #fff;
}

.wrapper {
  background: url(../img/pattern.png) repeat center #162a60;
  background-size: contain;
}

.container {
  width: 100%;
  min-height: 100vh;
  margin: 0 auto;
  padding: 0 10px;
}

.container:before {
  content: '';
  display: table;
}

.container:after {
  content: '';
  display: table;
  clear: both;
}

.page-title__heading {
  font-size: 3.125em;
  margin-top: 40px;
  margin-bottom: 35px;
  text-align: center;
}

.tiles {
  width: 100%;
  margin-bottom: 85px;
}

.tile {
  width: 100%;
  height: 150px;
  margin: 5px 0;
  padding: 10px;
  overflow: hidden;
  float: left;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
  -ms-flex-pack: end;
      justify-content: flex-end;
  color: #fff;
  text-decoration: none;
}

.tile__ico {
  -ms-flex: 1;
      flex: 1;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-align: center;
      -ms-grid-row-align: center;
      align-items: center;
  background-repeat: no-repeat;
}

.tile__name {
  font-size: 1.125em;
  text-align: center;
}

.tile--lg {
  width: 100%;
}

.tile--xl {
  width: 100%;
}

.tile--home {
  background-color: #3387ea;
}

.tile--about {
  background-color: #f9be3e;
}

.tile--portfolio {
  background-color: #d3573e;
}

.tile--photos {
  background-color: #59b0e2;
}

.tile--testimonials {
  background-color: #33af95;
}

.tile--hire {
  background-color: #86a73f;
}

.tile--contact {
  background-color: #7e5b8c;
}

[class*="ico"] {
  display: -ms-flexbox;
  display: flex;
}

[class*="ico"]:after {
  content: '';
  display: block;
}

.ico--home:after { background-image: url(../img/sprite.png); background-position: -222px 0;
  width: 52px;
  height: 54px;
}

.ico--about:after { background-image: url(../img/sprite.png); background-position: -74px 0;
  width: 50px;
  height: 63px;
}

.ico--portfolio:after { background-image: url(../img/sprite.png); background-position: 0 -87px;
  width: 57px;
  height: 53px;
}

.ico--photos:after { background-image: url(../img/sprite.png); background-position: -144px 0;
  width: 58px;
  height: 54px;
}

.ico--testimonials:after { background-image: url(../img/sprite.png); background-position: 0 -160px;
  width: 55px;
  height: 47px;
}

.ico--hire:after { background-image: url(../img/sprite.png); background-position: 0 0;
  width: 54px;
  height: 67px;
}

.ico--contact:after { background-image: url(../img/sprite.png); background-position: -77px -87px;
  width: 68px;
  height: 39px;
}

.ico--facebook:after { background-image: url(../img/sprite.png); background-position: -222px -74px;
  width: 32px;
  height: 32px;
}

.ico--twitter:after { background-image: url(../img/sprite.png); background-position: -165px -87px;
  width: 32px;
  height: 32px;
}

.ico--gplus:after { background-image: url(../img/sprite.png); background-position: -75px -160px;
  width: 32px;
  height: 32px;
}

.news-feed {
  padding: 0;
  height: auto;
}

.news-feed__poster {
  width: 100%;
  height: auto;
  float: left;
}

.news-feed__content {
  width: 100%;
  height: 150px;
  float: left;
  padding: 15px;
  background-color: #151a26;
  margin-top: 10px;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
  -ms-flex: 1;
      flex: 1;
  -ms-flex-pack: justify;
      justify-content: space-between;
}

.news-feed__header {
  font-size: 1.375em;
}

.news-feed__body {
  font-size: 1em;
  display: none;
}

.news-feed__date {
  color: #999;
  font-size: 0.75em;
}

.page-footer {
  width: 100%;
}

.page-footer__copyright {
  font-size: 0.875em;
  color: #99a4c1;
  margin-top: 10px;
  text-align: center;
}

.social {
  width: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
      justify-content: center;
}

.social__link {
  width: 75px;
  height: 75px;
  margin: 5px;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-align: center;
      align-items: center;
}

.social__link--facebook {
  background-color: #004088;
}

.social__link--twitter {
  background-color: #02abe3;
}

.social__link--gplus {
  background-color: #f14724;
}

@media only screen and (min-width: 480px) {
  .container {
    max-width: 480px;
    padding: 0;
  }
  .tiles {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: row;
        flex-direction: row;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    -ms-flex-pack: center;
        justify-content: center;
  }
  .tile {
    width: 150px;
    margin: 5px;
  }
  .news-feed {
    width: 310px;
  }
}

@media only screen and (min-width: 768px) {
  .container {
    max-width: 640px;
    display: -ms-flexbox;
    display: flex;
    -ms-flex: 1;
        flex: 1;
    -ms-flex-direction: column;
        flex-direction: column;
    -ms-flex-pack: center;
        justify-content: center;
  }
  .page-title {
    padding-left: 5px;
    padding-right: 5px;
  }
  .page-title__heading {
    text-align: left;
  }
  .tile__name {
    text-align: left;
  }
  .tile--lg {
    width: 310px;
  }
  .tile--xl {
    width: 470px;
  }
  .news-feed {
    height: 150px;
    -ms-flex-direction: row;
        flex-direction: row;
  }
  .news-feed__poster {
    width: 150px;
    height: 150px;
  }
  .news-feed__content {
    width: 310px;
    margin: 0;
  }
  .news-feed .tile__name {
    text-align: center;
  }
  .page-footer {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: row;
        flex-direction: row;
    -ms-flex-pack: justify;
        justify-content: space-between;
    -ms-flex-align: center;
        align-items: center;
  }
  .page-footer__copyright {
    white-space: nowrap;
    text-align: left;
    padding-left: 5px;
    padding-right: 5px;
  }
  .social {
    -ms-flex-pack: start;
        justify-content: flex-start;
  }
}

@media only screen and (min-width: 996px) {
  .wrapper {
    background-size: initial;
  }
  .container {
    max-width: 996px;
    padding: 0 18px;
  }
  .page-title__heading {
    font-size: 4.0625em;
    margin-top: 90px;
    margin-bottom: 85px;
  }
}

/*# sourceMappingURL=data:application/json;base64, */
